ylab("Error in pixels")
templateLMs[11,2] <- 170
referencePointX<-templateLMs$X
referencePointY<-templateLMs$Y
referencePointZ<-templateLMs$Z
for (name in names(fishpoints)) {
reg <- fishpoints[[name]]$registration
landmarks <- fishpoints[[name]]$landmarks
fishpoints[[name]]$xformPoints <- xform(landmarks,reg)
}
for (fish in seq(length(fishpoints))){
euclideanDistances<-c()
for (landmark in seq(nrow(fishpoints[[fish]]$xformPoints))){
euclideanDistances<-c(euclideanDistances ,
sqrt( (referencePointX[landmark]-
fishpoints[[fish]]$xformPoints[landmark,1])^2 +
(referencePointY[landmark] -
fishpoints[[fish]]$xformPoints[landmark,2])^2 +
(referencePointZ[landmark] -
fishpoints[[fish]]$xformPoints[landmark,3])^2
)
)
}
landmarks<-templateLMs$Landmark[1:length(euclideanDistances)]
euclideanDF <- data.frame(Landmarks=landmarks,Error=euclideanDistances)
fishpoints[[fish]]$euclideanError <- euclideanDF
}
euclidLongDF<-data.frame()
for (fish in seq(length(fishpoints))){
tempDF<-data.frame()
tempDF<-data.frame(fishpoints[[fish]]$euclideanError)
tempDF$animal<-names(fishpoints[fish])
euclidLongDF<-rbind(euclidLongDF, tempDF)
}
# We want to factor the names of the landmarks, that way we
# can have them written out the same way in the ggplot later
euclidLongDF$Landmarks <- factor(euclidLongDF$Landmarks,
levels=unique(euclidLongDF$Landmarks))
p <- ggplot(euclidLongDF,aes(Landmarks,Error))
p + geom_boxplot() +
theme(axis.text.x = element_text(angle = 65, hjust = 1)) +
ylab("Error in pixels")
p <- ggplot(euclidLongDF,aes(Landmarks,Error))
p + geom_boxplot() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ylab("Error in pixels") +
geom_jitter(width = 0.2, aes(color=animal)) +
ggtitle("Error with individual animals superimposed")
p <- ggplot(euclidLongDF,aes(Landmarks,Error))
p + geom_boxplot() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
ylab("Error in pixels") +
facet_wrap(~animal) +
ggtitle("Error with individual animals plotted as separate graphs")
p + geom_boxplot() +
theme(axis.text.x = element_text(angle = 65, hjust = 1)) +
ylab("Error in pixels")
ggsave("/Users/aostrov/Desktop/ClaudiaError.pdf")
animatedTimeSeries <- function(timeSeriesFile,
outdir,
ylab="dF/F",
xlab="Frame (100ms/frame)",
color="red",
...) {
csv<-read.csv(timeSeriesFile,...)
p = ggplot(data=csv,aes(X,Y))
pdf("test.pdf")
for (i in 1:nrow(csv)){
p + geom_point() +
ylab(ylab) +
xlab(xlab) +
geom_point(data=csv[i,], color=color)
dev.off()
ggsave(file.path(outdir,"test.pdf"))
# ggsave(file.path(outdir,
#                  paste(basename(timeSeriesFile),
#                        "-",
#                        i,
#                        ".pdf"
#                        ,sep="")
# ))
}
}
animatedTimeSeries(csv,"~/Desktop/")
animatedTimeSeries("~/projects/R/OrgerLab/LSMCodeR/stuff/Average_dff_stim3_90-181_median3d_cellBody.csv","~/Desktop/")
animatedTimeSeries <- function(timeSeriesFile,
outdir,
ylab="dF/F",
xlab="Frame (100ms/frame)",
color="red",
...) {
csv<-read.csv(timeSeriesFile,...)
p = ggplot(data=csv,aes(X,Y))
pdf("test.pdf")
for (i in 1:nrow(csv)){
p + geom_point() +
ylab(ylab) +
xlab(xlab) +
geom_point(data=csv[i,], color=color)
dev.off()
# ggsave(file.path(outdir,
#                  paste(basename(timeSeriesFile),
#                        "-",
#                        i,
#                        ".pdf"
#                        ,sep="")
# ))
}
ggsave(file.path(outdir,"test.pdf"))
}
animatedTimeSeries("~/projects/R/OrgerLab/LSMCodeR/stuff/Average_dff_stim3_90-181_median3d_cellBody.csv","~/Desktop/")
animatedTimeSeries <- function(timeSeriesFile,
outdir,
ylab="dF/F",
xlab="Frame (100ms/frame)",
color="red",
...) {
csv<-read.csv(timeSeriesFile,...)
p = ggplot(data=csv,aes(X,Y))
pdf("test.pdf")
for (i in 1:nrow(csv)){
p + geom_point() +
ylab(ylab) +
xlab(xlab) +
geom_point(data=csv[i,], color=color)
# ggsave(file.path(outdir,
#                  paste(basename(timeSeriesFile),
#                        "-",
#                        i,
#                        ".pdf"
#                        ,sep="")
# ))
}
dev.off()
ggsave(file.path(outdir,"test.pdf"))
}
animatedTimeSeries("~/projects/R/OrgerLab/LSMCodeR/stuff/Average_dff_stim3_90-181_median3d_cellBody.csv","~/Desktop/")
animatedTimeSeries <- function(timeSeriesFile,
outdir,
ylab="dF/F",
xlab="Frame (100ms/frame)",
color="red",
outputType=c("pdf","tiff","png","bmp","svg"),
...) {
outputType<-match.arg(outputType)
csv<-read.csv(timeSeriesFile,...)
p = ggplot(data=csv,aes(X,Y))
for (i in 1:nrow(csv)){
p + geom_point() +
ylab(ylab) +
xlab(xlab) +
geom_point(data=csv[i,], color=color)
ggsave(file.path(outdir,
paste(basename(timeSeriesFile),
"-",
i,
".",
outputType,
sep="")
))
}
}
animatedTimeSeries("~/projects/R/OrgerLab/LSMCodeR/stuff/Average_dff_stim3_90-181_median3d_cellBody.csv","~/projects/R/OrgerLab/LSMCodeR/stuff/",outputType = "png")
?system
p
p = ggplot(data=csv,aes(X,Y))
p
p + geom_point()
p + geom_point() + geom_point(data=csv[1,],color="red", size=2)
p + geom_point() + geom_point(data=csv[1,],color="red", size=4)
p + geom_point() + geom_point(data=csv[1,],color="red", size=3)
animatedTimeSeries <- function(timeSeriesFile,
outdir,
ylab="dF/F",
xlab="Frame (100ms/frame)",
color="red",
outputType=c("pdf","tiff","png","bmp","svg"),
size=2,
delay=0.1,
loop=1,
outputX=480,
outputY=270,
...) {
outputType<-match.arg(outputType)
csv<-read.csv(timeSeriesFile,...)
# here I should make a temp dir to store the individual files
tempDir<-file.path(outdir,'tempdir')
dir.create(tempDir)
outFileStem <- basename(timeSeriesFile)
# p = ggplot(data=csv,aes(X,Y))
# for (i in 1:nrow(csv)){
#   p + geom_point() +
#     ylab(ylab) +
#     xlab(xlab) +
#     geom_point(data=csv[i,], color=color, size = size)
#   ggsave(file.path(outdir,
#                    paste(outFileStem,
#                          "-",
#                          i,
#                          ".",
#                          outputType,
#                          sep="")
#   ))
# }
cmd <- paste("convert -delay ", delay, " -loop ", loop,
file.path(tempDir,paste(outFileStem,"-*.",outputType,sep="")),
" -scale ",outputX,"x",outputY, " ",
file.path(outdir,paste(outFileStem,".gif"))
)
print(cmd)
# here i should formulate a call to imagemagick to make a gif from the assembled files
# system("convert -delay 0.1 -loop 1 /Users/aostrov/projects/R/OrgerLab/LSMCodeR/stuff/Average_dff_stim3_90-181_median3d_cellBody.csv-*.png -scale 480x270 /Users/aostrov/projects/R/OrgerLab/LSMCodeR/stuff/test.gif")
# here I should delete the temp dir and just keep the final image
# unlink(tempDir)
}
animatedTimeSeries("~/projects/R/OrgerLab/LSMCodeR/stuff/Average_dff_stim3_90-181_median3d_cellBody.csv","~/projects/R/OrgerLab/LSMCodeR/stuff/",outputType = "png")
animatedTimeSeries <- function(timeSeriesFile,
outdir,
ylab="dF/F",
xlab="Frame (100ms/frame)",
color="red",
outputType=c("pdf","tiff","png","bmp","svg"),
size=2,
delay=0.1,
loop=1,
outputX=480,
outputY=270,
...) {
outputType<-match.arg(outputType)
csv<-read.csv(timeSeriesFile,...)
# here I should make a temp dir to store the individual files
tempDir<-file.path(outdir,'tempdir')
dir.create(tempDir)
outFileStem <- basename(timeSeriesFile)
# p = ggplot(data=csv,aes(X,Y))
# for (i in 1:nrow(csv)){
#   p + geom_point() +
#     ylab(ylab) +
#     xlab(xlab) +
#     geom_point(data=csv[i,], color=color, size = size)
#   ggsave(file.path(outdir,
#                    paste(outFileStem,
#                          "-",
#                          i,
#                          ".",
#                          outputType,
#                          sep="")
#   ))
# }
cmd <- paste("convert -delay ", delay, " -loop ", loop,
file.path(tempDir,paste(outFileStem,"-*.",outputType,sep="")),
" -scale ",outputX,"x",outputY, " ",
file.path(outdir,paste(outFileStem,".gif",sep="")),
sep="")
print(cmd)
# here i should formulate a call to imagemagick to make a gif from the assembled files
# system("convert -delay 0.1 -loop 1 /Users/aostrov/projects/R/OrgerLab/LSMCodeR/stuff/Average_dff_stim3_90-181_median3d_cellBody.csv-*.png -scale 480x270 /Users/aostrov/projects/R/OrgerLab/LSMCodeR/stuff/test.gif")
# here I should delete the temp dir and just keep the final image
# unlink(tempDir)
}
animatedTimeSeries("~/projects/R/OrgerLab/LSMCodeR/stuff/Average_dff_stim3_90-181_median3d_cellBody.csv","~/projects/R/OrgerLab/LSMCodeR/stuff/",outputType = "png")
animatedTimeSeries <- function(timeSeriesFile,
outdir,
ylab="dF/F",
xlab="Frame (100ms/frame)",
color="red",
outputType=c("pdf","tiff","png","bmp","svg"),
size=2,
delay=0.1,
loop=1,
outputX=480,
outputY=270,
...) {
outputType<-match.arg(outputType)
csv<-read.csv(timeSeriesFile,...)
# here I should make a temp dir to store the individual files
tempDir<-file.path(outdir,'tempdir')
dir.create(tempDir)
outFileStem <- basename(timeSeriesFile)
# p = ggplot(data=csv,aes(X,Y))
# for (i in 1:nrow(csv)){
#   p + geom_point() +
#     ylab(ylab) +
#     xlab(xlab) +
#     geom_point(data=csv[i,], color=color, size = size)
#   ggsave(file.path(outdir,
#                    paste(outFileStem,
#                          "-",
#                          i,
#                          ".",
#                          outputType,
#                          sep="")
#   ))
# }
cmd <- paste("convert -delay ", delay, " -loop ", loop, " ",
file.path(tempDir,paste(outFileStem,"-*.",outputType,sep="")),
" -scale ",outputX,"x",outputY, " ",
file.path(outdir,paste(outFileStem,".gif",sep="")),
sep="")
print(cmd)
# here i should formulate a call to imagemagick to make a gif from the assembled files
# system("convert -delay 0.1 -loop 1 /Users/aostrov/projects/R/OrgerLab/LSMCodeR/stuff/Average_dff_stim3_90-181_median3d_cellBody.csv-*.png -scale 480x270 /Users/aostrov/projects/R/OrgerLab/LSMCodeR/stuff/test.gif")
# here I should delete the temp dir and just keep the final image
# unlink(tempDir)
}
animatedTimeSeries("~/projects/R/OrgerLab/LSMCodeR/stuff/Average_dff_stim3_90-181_median3d_cellBody.csv","~/projects/R/OrgerLab/LSMCodeR/stuff/",outputType = "png")
animatedTimeSeries <- function(timeSeriesFile,
outdir,
ylab="dF/F",
xlab="Frame (100ms/frame)",
color="red",
outputType=c("pdf","tiff","png","bmp","svg"),
size=2,
delay=0.1,
loop=1,
outputX=480,
outputY=270,
...) {
outputType<-match.arg(outputType)
csv<-read.csv(timeSeriesFile,...)
# here I should make a temp dir to store the individual files
tempDir<-file.path(outdir,'tempdir')
dir.create(tempDir)
outFileStem <- basename(timeSeriesFile)
p = ggplot(data=csv,aes(X,Y))
for (i in 1:nrow(csv)){
p + geom_point() +
ylab(ylab) +
xlab(xlab) +
geom_point(data=csv[i,], color=color, size = size)
ggsave(file.path(outdir,
paste(outFileStem,
"-",
i,
".",
outputType,
sep="")
))
}
cmd <- paste("convert -delay ", delay, " -loop ", loop, " ",
file.path(tempDir,paste(outFileStem,"-*.",outputType,sep="")),
" -scale ",outputX,"x",outputY, " ",
file.path(outdir,paste(outFileStem,".gif",sep="")),
sep="")
print(cmd)
system(cmd)
# here i should formulate a call to imagemagick to make a gif from the assembled files
# system("convert -delay 0.1 -loop 1 /Users/aostrov/projects/R/OrgerLab/LSMCodeR/stuff/Average_dff_stim3_90-181_median3d_cellBody.csv-*.png -scale 480x270 /Users/aostrov/projects/R/OrgerLab/LSMCodeR/stuff/test.gif")
# here I should delete the temp dir and just keep the final image
# unlink(tempDir)
}
animatedTimeSeries <- function(timeSeriesFile,
outdir,
ylab="dF/F",
xlab="Frame (100ms/frame)",
color="red",
outputType=c("pdf","tiff","png","bmp","svg"),
size=2,
delay=0.1,
loop=1,
outputX=480,
outputY=270,
...) {
outputType<-match.arg(outputType)
csv<-read.csv(timeSeriesFile,...)
# here I should make a temp dir to store the individual files
tempDir<-file.path(outdir,'tempdir')
dir.create(tempDir)
outFileStem <- basename(timeSeriesFile)
p = ggplot(data=csv,aes(X,Y))
for (i in 1:nrow(csv)){
p + geom_point() +
ylab(ylab) +
xlab(xlab) +
geom_point(data=csv[i,], color=color, size = size)
ggsave(file.path(outdir,
paste(outFileStem,
"-",
i,
".",
outputType,
sep="")
))
}
cmd <- paste("convert -delay ", delay, " -loop ", loop, " ",
file.path(tempDir,paste(outFileStem,"-*.",outputType,sep="")),
" -scale ",outputX,"x",outputY, " ",
file.path(outdir,paste(outFileStem,".gif",sep="")),
sep="")
print(cmd)
system(cmd)
# here i should formulate a call to imagemagick to make a gif from the assembled files
# system("convert -delay 0.1 -loop 1 /Users/aostrov/projects/R/OrgerLab/LSMCodeR/stuff/Average_dff_stim3_90-181_median3d_cellBody.csv-*.png -scale 480x270 /Users/aostrov/projects/R/OrgerLab/LSMCodeR/stuff/test.gif")
# here I should delete the temp dir and just keep the final image
# unlink(tempDir)
}
animatedTimeSeries("~/projects/R/OrgerLab/LSMCodeR/stuff/Average_dff_stim3_90-181_median3d_cellBody.csv","~/projects/R/OrgerLab/LSMCodeR/stuff/",outputType = "png",size = 5, color="magenta")
animatedTimeSeries <- function(timeSeriesFile,
outdir,
ylab="dF/F",
xlab="Frame (100ms/frame)",
color="red",
outputType=c("pdf","tiff","png","bmp","svg"),
size=2,
delay=0.1,
loop=1,
outputX=480,
outputY=270,
...) {
outputType<-match.arg(outputType)
csv<-read.csv(timeSeriesFile,...)
# here I should make a temp dir to store the individual files
tempDir<-file.path(outdir,'tempdir')
dir.create(tempDir)
outFileStem <- basename(timeSeriesFile)
p = ggplot(data=csv,aes(X,Y))
for (i in 1:nrow(csv)){
p + geom_point() +
ylab(ylab) +
xlab(xlab) +
geom_point(data=csv[i,], color=color, size = size)
ggsave(file.path(tempDir,
paste(outFileStem,
"-",
i,
".",
outputType,
sep="")
))
}
cmd <- paste("convert -delay ", delay, " -loop ", loop, " ",
file.path(tempDir,paste(outFileStem,"-*.",outputType,sep="")),
" -scale ",outputX,"x",outputY, " ",
file.path(outdir,paste(outFileStem,".gif",sep="")),
sep="")
print(cmd)
system(cmd)
# here i should formulate a call to imagemagick to make a gif from the assembled files
# system("convert -delay 0.1 -loop 1 /Users/aostrov/projects/R/OrgerLab/LSMCodeR/stuff/Average_dff_stim3_90-181_median3d_cellBody.csv-*.png -scale 480x270 /Users/aostrov/projects/R/OrgerLab/LSMCodeR/stuff/test.gif")
# here I should delete the temp dir and just keep the final image
# unlink(tempDir)
}
animatedTimeSeries("~/projects/R/OrgerLab/LSMCodeR/stuff/Average_dff_stim3_90-181_median3d_cellBody.csv","~/projects/R/OrgerLab/LSMCodeR/stuff/",outputType = "png",size = 5, color="magenta")
sprintf("%02d",1)
sprintf("%02d",10)
animatedTimeSeries <- function(timeSeriesFile,
outdir,
ylab="dF/F",
xlab="Frame (100ms/frame)",
color="red",
outputType=c("pdf","tiff","png","bmp","svg"),
size=2,
delay=0.1,
loop=1,
outputX=480,
outputY=270,
...) {
outputType<-match.arg(outputType)
csv<-read.csv(timeSeriesFile,...)
# here I should make a temp dir to store the individual files
tempDir<-file.path(outdir,'tempdir')
dir.create(tempDir)
outFileStem <- basename(timeSeriesFile)
p = ggplot(data=csv,aes(X,Y))
for (i in 1:nrow(csv)){
p + geom_point() +
ylab(ylab) +
xlab(xlab) +
geom_point(data=csv[i,], color=color, size = size)
ggsave(file.path(tempDir,
paste(outFileStem,
"-",
sprintf("%04d",i),
".",
outputType,
sep="")
))
}
cmd <- paste("convert -delay ", delay, " -loop ", loop, " ",
file.path(tempDir,paste(outFileStem,"-*.",outputType,sep="")),
" -scale ",outputX,"x",outputY, " ",
file.path(outdir,paste(outFileStem,".gif",sep="")),
sep="")
print(cmd)
system(cmd)
# here i should formulate a call to imagemagick to make a gif from the assembled files
# system("convert -delay 0.1 -loop 1 /Users/aostrov/projects/R/OrgerLab/LSMCodeR/stuff/Average_dff_stim3_90-181_median3d_cellBody.csv-*.png -scale 480x270 /Users/aostrov/projects/R/OrgerLab/LSMCodeR/stuff/test.gif")
# here I should delete the temp dir and just keep the final image
unlink(tempDir,rec=T)
}
animatedTimeSeries("~/projects/R/OrgerLab/LSMCodeR/stuff/Average_dff_stim3_90-181_median3d_cellBody.csv","~/projects/R/OrgerLab/LSMCodeR/stuff/",outputType = "png",size = 5, color="magenta")
1:1
source('~/projects/R/OrgerLab/LSMCodeR/calciumImagingFunctions.R')
animatedTimeSeries("~/projects/R/OrgerLab/LSMCodeR/stuff/Average_dff_stim3_90-181_median3d_cellBody.csv","~/projects/R/OrgerLab/LSMCodeR/stuff/",outputType = "png",size = 5, color="magenta")
source('~/projects/R/OrgerLab/LSMCodeR/calciumImagingFunctions.R')
animatedTimeSeries("~/projects/R/OrgerLab/LSMCodeR/stuff/Average_dff_stim3_90-181_median3d_cellBody.csv","~/projects/R/OrgerLab/LSMCodeR/stuff/",outputType = "png",size = 5, color="magenta")
str(p)
p
p + geom_point(data=csv[1:1,])
lims(p)
lims(data=p)
ggplot_build(p)$layout$panel_params[[1]]$x.range
ggplot_build(p)$layout$panel_params[[1]]$y.range
source('~/projects/R/OrgerLab/LSMCodeR/calciumImagingFunctions.R')
animatedTimeSeries("~/projects/R/OrgerLab/LSMCodeR/stuff/Average_dff_stim3_90-181_median3d_cellBody.csv","~/projects/R/OrgerLab/LSMCodeR/stuff/",outputType = "png",size = 5, color="magenta")
source('~/projects/R/OrgerLab/LSMCodeR/calciumImagingFunctions.R')
animatedTimeSeries("~/projects/R/OrgerLab/LSMCodeR/stuff/Average_dff_stim3_90-181_median3d_cellBody.csv","~/projects/R/OrgerLab/LSMCodeR/stuff/",outputType = "png",size = 5, color="magenta",comet = T)
animatedTimeSeries("~/projects/R/OrgerLab/LSMCodeR/stuff/Average_dff_stim3_90-181_median3d_cellBody.csv","~/projects/R/OrgerLab/LSMCodeR/stuff/",outputType = "png",size = 5, color="magenta",comet = F)
system('which convert')
system('which convertsss')
system2("which","convert")
system2("which","convertss")
