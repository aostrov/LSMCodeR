---
title: "RegistrationPipeline"
output:
  html_document:
    df_print: paged
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Confocal tERK Registration

Jens and Adinda are generating tERK stained fish brains that they would
like to register out to community templates such as the ZBrain and
ZBB templates. This will require either direct registration of their raw
images to the outside templates, or a bridging registration from a lab
local template to the outside templates.

### Direct Registration

I have only done a preliminary test, but I was not impressed with this.
**TODO**: Run all images against the ZBrain template and evaluate the accuracy
of the registration. Maybe Adinda and Jens can help with choosing some landmarks,
and I can reuse some of the scripts from Claudia to measure the accuracy of the
transformations.

### Registration to Internal Template

This seemed a bit more succesful, with the tERK2 internal template
showing a better correspondence to the ZBrain template after
registration. I have also calculated a rotation of the ZBrain template
so that we can register the up/down oriented fish from our confocal
to the left/right orientation of the ZBrain template. 
**TODO**: Put together an easy to use bridging registration.

### Overview of steps

1. Create in house template
2. Register each acquired brain to our inhouse template
3. Adjust ZBrain template so rotation is equivalent to our inhouse template
4. Establish bridging registration between our template and the rotated ZBrain template
5. Establish rigid transformation matrix to get our data into the original ZBrain space
6. Bridge our data to the ZBrain template

#### Creat in house template

*Using CMTK*
Take a selection of ten of the most complete images that are roughly all in the same orientation
and register them to one image (20181027-Pcp-F1). Run the
`avg_adm` tool. Use the output of that as the target for another round of registration and averaging.
A third round should be enough to get a template that is a good shape average.

In this case, I have made up to tERK3. tERK3 seems reasonable enough as a template, and all images,
including ones not used to make it seem to register to it. I made one further change to tERK3, in
which I made it roughly symmetric across it's primary axis. I did this by doing an affine registration
of tERK3 to it's flipped self (tERK3-flipped.nrrd, made in Fiji). The affine registration is then adjusted
so that the rotation and translation components are halved and flipped in sign; additionally any small changes
in scaling are put back to 1 in all dimensions.

CMTK affine transform matrix before halving:
```
! TYPEDSTREAM 2.4

registration {
	reference_study "refbrain/tERK3.nrrd"
	floating_study "images/tERK3-flipped_01.nrrd"
	affine_xform {
		xlate 12 0 0 
		rotate -0.212892364 3.435717822 8.708318686 
		scale 0.9980754426 1.001924557 1.000962279 
		shear 0 0 0 
		center 284 519.6 140.5 
	}
}
```
CMTK affine transform matrix after halving:
```
! TYPEDSTREAM 2.4

registration {
	reference_study "refbrain/tERK3.nrrd"
	floating_study "images/tERK3-flipped_01.nrrd"
	affine_xform {
		xlate -6 0 0 
		rotate 0.106446182 -1.717858911 -4.354159343 
		scale 1 1 1 
		shear 0 0 0 
		center 284 519.6 140.5 
	}
}
```

```{bash makeSymmetric.sh, eval=FALSE }
#!/bin/sh

reformatx \
-o ./refbrain/tERK3f.nrrd \
--floating ./refbrain/tERK3.nrrd \
./refbrain/tERK3.nrrd \
./Registration.flipping/affine/tERK3_tERK3-flipped_01_9dof_forMirroring.list 

```

With a template that is roughly symmetric it is relatively simple to apply
a flip to an image registered to it, and have the flipped neuron/pattern
be in a relatively correct place on the other side of the brain. For a better
fit, it is possible to register the mostly symmetric brain to its flipped
self and use that transformation, but that is definitely more complicated,
and it's not clear if we need that level of exactness.
(**TODO**: try replicating Greg's flipping for best mirroring of neurons).

#### Register each acquired brain to our inhouse template

Registering each individual brain to the inhouse template is straightforward
and can be best done using Greg Jefferis' `munger.pl` script.

```{bash munger_adindaFullRegistration.sh, eval=FALSE}
#!/bin/sh
# 2018-07-27_19.29.02

"/opt/local/bin/munger" \
-b "/opt/local/bin/" \
-a -w -r 0102 \
-X 26 -C 8 -G 120 -R 3 \
-A "--sampling 2 --omit-original-data --accuracy 4" \
-W "--sampling  2 --omit-original-data --accuracy 1.5" \
-T 3 \
-s "refbrain/tERK3f.nrrd" \
images

```

It is at this point that it might be useful to start thinking about how to evaluate
the accuracy of the registrations.

#### Adjust ZBrain template so rotation is equivalent to our inhouse template

Now that we have a set of registrations to our internal template we need to understand
how to best perform bridging registrations to external templates: in this case the 
ZBrain tERK template. The ZBrain template is rotated +/-90 degrees in relation to how
fish tend to be mounted and imaged on the confocal here, and CMTK does not like
to deal with images that are rotated more than 45 degrees off axis from the template.

What I hope to achieve with most of the registration pipeline
is limited user involvement, which implies that opening up images in Fiji and manually
rotating them should be both unwanted and unnecessary work. As such, I opted to rotate
the ZBrain image so that its principle axis shares the same axis as images
generated in the Orger lab. This means that the bridging registration can proceed easily,
but will require some adjusting so that the final images are in the correct orientation
for easy comparison with external datasets (see below).


